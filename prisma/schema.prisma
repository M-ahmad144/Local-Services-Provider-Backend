// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id             Int       @id @default(autoincrement())
  name                String
  email               String    @unique
  password            String
  user_type           String    // 'freelancer' or 'buyer'
  profile_description String?
  profile_image       String?
  location            String?
  rating              Float?    // Overall rating for the user
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  services            Service[]
  orders              Order[]    @relation("BuyerOrders")
  freelancerOrders    Order[]    @relation("FreelancerOrders")
  reviews             Review[]    @relation("Reviewer")
  transactions        Transaction[]
  messagesSent        Message[]    @relation("Sender")
  messagesReceived    Message[]    @relation("Receiver")
}

model Service {
  service_id        Int       @id @default(autoincrement())
  user_id          Int       // FK referencing User
  title            String
  description      String
  category         String
  price            Float
  delivery_time    String
  service_images   String[]   // Store URLs for images
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  user             User       @relation(fields: [user_id], references: [user_id])
  orders           Order[]
  reviews          Review[]    // Add reviews relation here
}

model Order {
  order_id          Int       @id @default(autoincrement())
  service_id       Int       // FK referencing Service
  buyer_id         Int       // FK referencing User (buyer)
  freelancer_id    Int       // FK referencing User (freelancer)
  order_status     String     // e.g., 'pending', 'in progress', 'completed', 'cancelled'
  price            Float
  order_date       DateTime   @default(now())
  delivery_date    DateTime?
  updated_at       DateTime   @updatedAt

  service          Service    @relation(fields: [service_id], references: [service_id])
  buyer            User       @relation("BuyerOrders", fields: [buyer_id], references: [user_id])
  freelancer       User       @relation("FreelancerOrders", fields: [freelancer_id], references: [user_id])
  reviews          Review[]   // Adding reviews relation
  transactions     Transaction[] // Adding transaction relation
  messages         Message[]    // Adding message relation
}

model Review {
  review_id         Int       @id @default(autoincrement())
  order_id          Int       // FK referencing Order
  buyer_id          Int       // FK referencing User (buyer)
  service_id        Int       // FK referencing Service
  rating            Int       // Rating (e.g., out of 5 stars)
  review_text       String
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt

  order             Order      @relation(fields: [order_id], references: [order_id])
  buyer             User       @relation("Reviewer", fields: [buyer_id], references: [user_id])
  service          Service     @relation(fields: [service_id], references: [service_id])
}

model Category {
  category_id       Int       @id @default(autoincrement())
  name              String
  description       String?
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
}

model Transaction {
  transaction_id    Int       @id @default(autoincrement())
  order_id          Int       // FK referencing Order
  buyer_id          Int       // FK referencing User (buyer)
  amount            Float
  payment_method    String     // e.g., 'Credit Card', 'PayPal'
  payment_status    String     // e.g., 'successful', 'pending', 'failed'
  created_at        DateTime   @default(now())

  order             Order      @relation(fields: [order_id], references: [order_id])
  buyer             User       @relation(fields: [buyer_id], references: [user_id])
}

model Message {
  message_id        Int       @id @default(autoincrement())
  order_id          Int       // FK referencing Order
  sender_id         Int       // FK referencing User (sender)
  receiver_id       Int       // FK referencing User (receiver)
  message_text      String
  sent_at           DateTime   @default(now())

  order             Order      @relation(fields: [order_id], references: [order_id])
  sender            User       @relation("Sender", fields: [sender_id], references: [user_id])
  receiver          User       @relation("Receiver", fields: [receiver_id], references: [user_id])
}
